//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PPPKEntities : DbContext
    {
        public PPPKEntities()
            : base("name=PPPKEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Driver> Driver { get; set; }
        public virtual DbSet<TravelRoute> TravelRoute { get; set; }
        public virtual DbSet<TravelWarrant> TravelWarrant { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<VehicleService> VehicleService { get; set; }
    
        public virtual int addExampleRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addExampleRecords");
        }
    
        public virtual int cleanDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cleanDatabase");
        }
    
        public virtual int createDriver(ObjectParameter iDDriver, string firstname, string surname, string phoneNumber, string drivingLicenceNumber)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var drivingLicenceNumberParameter = drivingLicenceNumber != null ?
                new ObjectParameter("DrivingLicenceNumber", drivingLicenceNumber) :
                new ObjectParameter("DrivingLicenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createDriver", iDDriver, firstnameParameter, surnameParameter, phoneNumberParameter, drivingLicenceNumberParameter);
        }
    
        public virtual int createTravelRoute(ObjectParameter iDRoute, Nullable<int> travelHours, Nullable<double> coordinateA, Nullable<double> coordinateB, Nullable<int> kilometersTavelled, Nullable<double> averageSpeed, Nullable<double> fuelSpent, Nullable<int> travelWarrantID)
        {
            var travelHoursParameter = travelHours.HasValue ?
                new ObjectParameter("TravelHours", travelHours) :
                new ObjectParameter("TravelHours", typeof(int));
    
            var coordinateAParameter = coordinateA.HasValue ?
                new ObjectParameter("CoordinateA", coordinateA) :
                new ObjectParameter("CoordinateA", typeof(double));
    
            var coordinateBParameter = coordinateB.HasValue ?
                new ObjectParameter("CoordinateB", coordinateB) :
                new ObjectParameter("CoordinateB", typeof(double));
    
            var kilometersTavelledParameter = kilometersTavelled.HasValue ?
                new ObjectParameter("KilometersTavelled", kilometersTavelled) :
                new ObjectParameter("KilometersTavelled", typeof(int));
    
            var averageSpeedParameter = averageSpeed.HasValue ?
                new ObjectParameter("AverageSpeed", averageSpeed) :
                new ObjectParameter("AverageSpeed", typeof(double));
    
            var fuelSpentParameter = fuelSpent.HasValue ?
                new ObjectParameter("FuelSpent", fuelSpent) :
                new ObjectParameter("FuelSpent", typeof(double));
    
            var travelWarrantIDParameter = travelWarrantID.HasValue ?
                new ObjectParameter("TravelWarrantID", travelWarrantID) :
                new ObjectParameter("TravelWarrantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createTravelRoute", iDRoute, travelHoursParameter, coordinateAParameter, coordinateBParameter, kilometersTavelledParameter, averageSpeedParameter, fuelSpentParameter, travelWarrantIDParameter);
        }
    
        public virtual int createTravelWarrant(ObjectParameter iDTravelWarrant, string commander, Nullable<int> warrantNumber, string startPoint, string destination, Nullable<int> quantityOfDays, Nullable<System.DateTime> dateOfOpening, Nullable<System.DateTime> dateOfClosing, Nullable<int> driverID, Nullable<int> vehicleID)
        {
            var commanderParameter = commander != null ?
                new ObjectParameter("Commander", commander) :
                new ObjectParameter("Commander", typeof(string));
    
            var warrantNumberParameter = warrantNumber.HasValue ?
                new ObjectParameter("WarrantNumber", warrantNumber) :
                new ObjectParameter("WarrantNumber", typeof(int));
    
            var startPointParameter = startPoint != null ?
                new ObjectParameter("StartPoint", startPoint) :
                new ObjectParameter("StartPoint", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var quantityOfDaysParameter = quantityOfDays.HasValue ?
                new ObjectParameter("QuantityOfDays", quantityOfDays) :
                new ObjectParameter("QuantityOfDays", typeof(int));
    
            var dateOfOpeningParameter = dateOfOpening.HasValue ?
                new ObjectParameter("DateOfOpening", dateOfOpening) :
                new ObjectParameter("DateOfOpening", typeof(System.DateTime));
    
            var dateOfClosingParameter = dateOfClosing.HasValue ?
                new ObjectParameter("DateOfClosing", dateOfClosing) :
                new ObjectParameter("DateOfClosing", typeof(System.DateTime));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createTravelWarrant", iDTravelWarrant, commanderParameter, warrantNumberParameter, startPointParameter, destinationParameter, quantityOfDaysParameter, dateOfOpeningParameter, dateOfClosingParameter, driverIDParameter, vehicleIDParameter);
        }
    
        public virtual int createVehicle(ObjectParameter iDVehicle, string vehicleType, string make, Nullable<int> yearOfMake, Nullable<int> kilometers, Nullable<bool> isAvailable, string vehicleServiceDetails)
        {
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var yearOfMakeParameter = yearOfMake.HasValue ?
                new ObjectParameter("YearOfMake", yearOfMake) :
                new ObjectParameter("YearOfMake", typeof(int));
    
            var kilometersParameter = kilometers.HasValue ?
                new ObjectParameter("Kilometers", kilometers) :
                new ObjectParameter("Kilometers", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var vehicleServiceDetailsParameter = vehicleServiceDetails != null ?
                new ObjectParameter("VehicleServiceDetails", vehicleServiceDetails) :
                new ObjectParameter("VehicleServiceDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createVehicle", iDVehicle, vehicleTypeParameter, makeParameter, yearOfMakeParameter, kilometersParameter, isAvailableParameter, vehicleServiceDetailsParameter);
        }
    
        public virtual int createVehicleService(ObjectParameter iDservice, string serviceDetails, Nullable<System.DateTime> serviceDate, Nullable<int> vehicleID)
        {
            var serviceDetailsParameter = serviceDetails != null ?
                new ObjectParameter("ServiceDetails", serviceDetails) :
                new ObjectParameter("ServiceDetails", typeof(string));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createVehicleService", iDservice, serviceDetailsParameter, serviceDateParameter, vehicleIDParameter);
        }
    
        public virtual int deleteDriver(Nullable<int> iDDriver)
        {
            var iDDriverParameter = iDDriver.HasValue ?
                new ObjectParameter("IDDriver", iDDriver) :
                new ObjectParameter("IDDriver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteDriver", iDDriverParameter);
        }
    
        public virtual int deleteRoute(Nullable<int> iDRoute)
        {
            var iDRouteParameter = iDRoute.HasValue ?
                new ObjectParameter("IDRoute", iDRoute) :
                new ObjectParameter("IDRoute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteRoute", iDRouteParameter);
        }
    
        public virtual int deleteTravelWarrant(Nullable<int> iDTravelWarrant)
        {
            var iDTravelWarrantParameter = iDTravelWarrant.HasValue ?
                new ObjectParameter("IDTravelWarrant", iDTravelWarrant) :
                new ObjectParameter("IDTravelWarrant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteTravelWarrant", iDTravelWarrantParameter);
        }
    
        public virtual int deleteVehicle(Nullable<int> iDVehicle)
        {
            var iDVehicleParameter = iDVehicle.HasValue ?
                new ObjectParameter("IDVehicle", iDVehicle) :
                new ObjectParameter("IDVehicle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteVehicle", iDVehicleParameter);
        }
    
        public virtual int deleteVehicleService(Nullable<int> iDservice)
        {
            var iDserviceParameter = iDservice.HasValue ?
                new ObjectParameter("IDservice", iDservice) :
                new ObjectParameter("IDservice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteVehicleService", iDserviceParameter);
        }
    
        public virtual ObjectResult<exportDataToXml_Result> exportDataToXml(Nullable<int> iDRoute)
        {
            var iDRouteParameter = iDRoute.HasValue ?
                new ObjectParameter("IDRoute", iDRoute) :
                new ObjectParameter("IDRoute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<exportDataToXml_Result>("exportDataToXml", iDRouteParameter);
        }
    
        public virtual ObjectResult<getAllDataFromDatabase_Result> getAllDataFromDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllDataFromDatabase_Result>("getAllDataFromDatabase");
        }
    
        public virtual ObjectResult<selectDriver_Result> selectDriver(Nullable<int> iDDriver)
        {
            var iDDriverParameter = iDDriver.HasValue ?
                new ObjectParameter("IDDriver", iDDriver) :
                new ObjectParameter("IDDriver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectDriver_Result>("selectDriver", iDDriverParameter);
        }
    
        public virtual ObjectResult<selectDrivers_Result> selectDrivers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectDrivers_Result>("selectDrivers");
        }
    
        public virtual ObjectResult<selectTravelRoute_Result> selectTravelRoute(Nullable<int> iDRoute)
        {
            var iDRouteParameter = iDRoute.HasValue ?
                new ObjectParameter("IDRoute", iDRoute) :
                new ObjectParameter("IDRoute", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTravelRoute_Result>("selectTravelRoute", iDRouteParameter);
        }
    
        public virtual ObjectResult<selectTravelRoutes_Result> selectTravelRoutes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTravelRoutes_Result>("selectTravelRoutes");
        }
    
        public virtual ObjectResult<selectTravelWarrant_Result> selectTravelWarrant(Nullable<int> iDTravelWarrant)
        {
            var iDTravelWarrantParameter = iDTravelWarrant.HasValue ?
                new ObjectParameter("IDTravelWarrant", iDTravelWarrant) :
                new ObjectParameter("IDTravelWarrant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTravelWarrant_Result>("selectTravelWarrant", iDTravelWarrantParameter);
        }
    
        public virtual ObjectResult<selectTravelWarrants_Result> selectTravelWarrants()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTravelWarrants_Result>("selectTravelWarrants");
        }
    
        public virtual ObjectResult<selectVehicle_Result> selectVehicle(Nullable<int> iDVehicle)
        {
            var iDVehicleParameter = iDVehicle.HasValue ?
                new ObjectParameter("IDVehicle", iDVehicle) :
                new ObjectParameter("IDVehicle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectVehicle_Result>("selectVehicle", iDVehicleParameter);
        }
    
        public virtual ObjectResult<selectVehicles_Result> selectVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectVehicles_Result>("selectVehicles");
        }
    
        public virtual ObjectResult<selectVehicleService_Result> selectVehicleService(Nullable<int> iDservice)
        {
            var iDserviceParameter = iDservice.HasValue ?
                new ObjectParameter("IDservice", iDservice) :
                new ObjectParameter("IDservice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectVehicleService_Result>("selectVehicleService", iDserviceParameter);
        }
    
        public virtual ObjectResult<selectVehicleServices_Result> selectVehicleServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectVehicleServices_Result>("selectVehicleServices");
        }
    
        public virtual int updateDriver(Nullable<int> iDDriver, string firstname, string surname, string phoneNumber, string drivingLicenceNumber)
        {
            var iDDriverParameter = iDDriver.HasValue ?
                new ObjectParameter("IDDriver", iDDriver) :
                new ObjectParameter("IDDriver", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var drivingLicenceNumberParameter = drivingLicenceNumber != null ?
                new ObjectParameter("DrivingLicenceNumber", drivingLicenceNumber) :
                new ObjectParameter("DrivingLicenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDriver", iDDriverParameter, firstnameParameter, surnameParameter, phoneNumberParameter, drivingLicenceNumberParameter);
        }
    
        public virtual int updateTravelRoute(Nullable<int> iDRoute, Nullable<int> travelHours, Nullable<double> coordinateA, Nullable<double> coordinateB, Nullable<int> kilometersTavelled, Nullable<double> averageSpeed, Nullable<double> fuelSpent, Nullable<int> travelWarrantID)
        {
            var iDRouteParameter = iDRoute.HasValue ?
                new ObjectParameter("IDRoute", iDRoute) :
                new ObjectParameter("IDRoute", typeof(int));
    
            var travelHoursParameter = travelHours.HasValue ?
                new ObjectParameter("TravelHours", travelHours) :
                new ObjectParameter("TravelHours", typeof(int));
    
            var coordinateAParameter = coordinateA.HasValue ?
                new ObjectParameter("CoordinateA", coordinateA) :
                new ObjectParameter("CoordinateA", typeof(double));
    
            var coordinateBParameter = coordinateB.HasValue ?
                new ObjectParameter("CoordinateB", coordinateB) :
                new ObjectParameter("CoordinateB", typeof(double));
    
            var kilometersTavelledParameter = kilometersTavelled.HasValue ?
                new ObjectParameter("KilometersTavelled", kilometersTavelled) :
                new ObjectParameter("KilometersTavelled", typeof(int));
    
            var averageSpeedParameter = averageSpeed.HasValue ?
                new ObjectParameter("AverageSpeed", averageSpeed) :
                new ObjectParameter("AverageSpeed", typeof(double));
    
            var fuelSpentParameter = fuelSpent.HasValue ?
                new ObjectParameter("FuelSpent", fuelSpent) :
                new ObjectParameter("FuelSpent", typeof(double));
    
            var travelWarrantIDParameter = travelWarrantID.HasValue ?
                new ObjectParameter("TravelWarrantID", travelWarrantID) :
                new ObjectParameter("TravelWarrantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTravelRoute", iDRouteParameter, travelHoursParameter, coordinateAParameter, coordinateBParameter, kilometersTavelledParameter, averageSpeedParameter, fuelSpentParameter, travelWarrantIDParameter);
        }
    
        public virtual int updateTravelWarrant(Nullable<int> iDTravelWarrant, string commander, Nullable<int> warrantNumber, string startPoint, string destination, Nullable<int> quantityOfDays, Nullable<System.DateTime> dateOfOpening, Nullable<System.DateTime> dateOfClosing, Nullable<int> driverID, Nullable<int> vehicleID)
        {
            var iDTravelWarrantParameter = iDTravelWarrant.HasValue ?
                new ObjectParameter("IDTravelWarrant", iDTravelWarrant) :
                new ObjectParameter("IDTravelWarrant", typeof(int));
    
            var commanderParameter = commander != null ?
                new ObjectParameter("Commander", commander) :
                new ObjectParameter("Commander", typeof(string));
    
            var warrantNumberParameter = warrantNumber.HasValue ?
                new ObjectParameter("WarrantNumber", warrantNumber) :
                new ObjectParameter("WarrantNumber", typeof(int));
    
            var startPointParameter = startPoint != null ?
                new ObjectParameter("StartPoint", startPoint) :
                new ObjectParameter("StartPoint", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var quantityOfDaysParameter = quantityOfDays.HasValue ?
                new ObjectParameter("QuantityOfDays", quantityOfDays) :
                new ObjectParameter("QuantityOfDays", typeof(int));
    
            var dateOfOpeningParameter = dateOfOpening.HasValue ?
                new ObjectParameter("DateOfOpening", dateOfOpening) :
                new ObjectParameter("DateOfOpening", typeof(System.DateTime));
    
            var dateOfClosingParameter = dateOfClosing.HasValue ?
                new ObjectParameter("DateOfClosing", dateOfClosing) :
                new ObjectParameter("DateOfClosing", typeof(System.DateTime));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTravelWarrant", iDTravelWarrantParameter, commanderParameter, warrantNumberParameter, startPointParameter, destinationParameter, quantityOfDaysParameter, dateOfOpeningParameter, dateOfClosingParameter, driverIDParameter, vehicleIDParameter);
        }
    
        public virtual int updateVehicle(Nullable<int> iDVehicle, string vehicleType, string make, Nullable<int> yearOfMake, Nullable<int> kilometers, Nullable<bool> isAvailable, string vehicleServiceDetails)
        {
            var iDVehicleParameter = iDVehicle.HasValue ?
                new ObjectParameter("IDVehicle", iDVehicle) :
                new ObjectParameter("IDVehicle", typeof(int));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var yearOfMakeParameter = yearOfMake.HasValue ?
                new ObjectParameter("YearOfMake", yearOfMake) :
                new ObjectParameter("YearOfMake", typeof(int));
    
            var kilometersParameter = kilometers.HasValue ?
                new ObjectParameter("Kilometers", kilometers) :
                new ObjectParameter("Kilometers", typeof(int));
    
            var isAvailableParameter = isAvailable.HasValue ?
                new ObjectParameter("IsAvailable", isAvailable) :
                new ObjectParameter("IsAvailable", typeof(bool));
    
            var vehicleServiceDetailsParameter = vehicleServiceDetails != null ?
                new ObjectParameter("VehicleServiceDetails", vehicleServiceDetails) :
                new ObjectParameter("VehicleServiceDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateVehicle", iDVehicleParameter, vehicleTypeParameter, makeParameter, yearOfMakeParameter, kilometersParameter, isAvailableParameter, vehicleServiceDetailsParameter);
        }
    
        public virtual int updateVehicleService(Nullable<int> iDservice, string serviceDetails, Nullable<System.DateTime> serviceDate, Nullable<int> vehicleID)
        {
            var iDserviceParameter = iDservice.HasValue ?
                new ObjectParameter("IDservice", iDservice) :
                new ObjectParameter("IDservice", typeof(int));
    
            var serviceDetailsParameter = serviceDetails != null ?
                new ObjectParameter("ServiceDetails", serviceDetails) :
                new ObjectParameter("ServiceDetails", typeof(string));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateVehicleService", iDserviceParameter, serviceDetailsParameter, serviceDateParameter, vehicleIDParameter);
        }
    
        public virtual ObjectResult<writeDriversToXml_Result> writeDriversToXml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<writeDriversToXml_Result>("writeDriversToXml");
        }
    
        public virtual ObjectResult<writeVehiclesToXml_Result> writeVehiclesToXml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<writeVehiclesToXml_Result>("writeVehiclesToXml");
        }
    }
}
